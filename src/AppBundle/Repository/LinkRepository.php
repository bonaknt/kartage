<?php

namespace AppBundle\Repository;

/**
 * LinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LinkRepository extends \Doctrine\ORM\EntityRepository
{
	public function findCategory()
	{
		$query = $this->_em->createQuery('SELECT s FROM AppBundle:Category s');
		$results = $query->getResult();

		$categoryArray = [];

		// ajout de l'index 0
		array_unshift($categoryArray, "");

		foreach ($results as $category) {
			array_push($categoryArray, $category->getTitle());
		}

		/*
		 *	Suppression de l'index 0 -> pour que les array keys
		 * 	soit en accord avec les IDs de la table Species
		 */
		unset($categoryArray[0]);

		return $categoryArray;
	}

	public function findSubCategory()
	{
		$query = $this->_em->createQuery('SELECT s FROM AppBundle:SubCategory s');
		$results = $query->getResult();

		$subCategoryArray = [];

		// ajout de l'index 0
		array_unshift($subCategoryArray, "");

		foreach ($results as $category) {
			array_push($subCategoryArray, $category->getTitle());
		}

		/*
		 *	Suppression de l'index 0 -> pour que les array keys
		 * 	soit en accord avec les IDs de la table Species
		 */
		unset($subCategoryArray[0]);

		return $subCategoryArray;
	}
    public function byCategorie($categorie)
    {
         $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.categories = :categorie')
                    ->orderBy('u.id')
                    ->setParameter('categorie', $categorie);
        return $qb->getQuery()->getResult();
    }

    public function bySousCategorie($sousCategorie, $categorie)
    {
         $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.sousCategories = :sousCategorie')
                    ->andWhere('u.categories = :categorie')
                    ->orderBy('u.id')
                    ->setParameter('sousCategorie', $sousCategorie)
                    ->setParameter('categorie', $categorie);
        return $qb->getQuery()->getResult();
    }

	public function getLiensWithCategories($categoryNames)
	{
		$qb = $this->createQueryBuilder('a');

		// On fait une jointure avec l'entité Category avec pour alias « c »
		$qb
			->innerJoin('a.categories', 'c')
		  	->addSelect('c')
		;

		// Puis on filtre sur le nom des catégories à l'aide d'un IN
		$qb
		->where('c = :categoryNames')
		->setParameter('categoryNames', $categoryNames);

		;
		// La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

		// Enfin, on retourne le résultat
		return $qb
		  	->getQuery()
		  	->getResult()
		;
	}

	public function findByCategorie($categorie)
	{
		$qb = $this->createQueryBuilder('a');

		// On fait une jointure avec l'entité Category avec pour alias « c »
		$qb
			->innerJoin('a.categories', 'c')
		  	->addSelect('c')
		;

		$qb
		    ->where('c.title = :categorie')
		    ->setParameter('title', $categorie)
		;
		// Puis on filtre sur le nom des catégories à l'aide d'un IN
		//$qb->where($qb->expr()->in('c.title', $categoryNames));
		// La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

		// Enfin, on retourne le résultat
		return $qb
		  	->getQuery()
		  	->getResult()
		;
	}


}
